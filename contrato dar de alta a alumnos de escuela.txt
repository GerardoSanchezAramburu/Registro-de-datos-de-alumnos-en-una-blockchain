// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract RegistroEscuela {

    // Estructura basica que guarda los datos  de los alumnos de la escuela
    struct Alumno {
        string nombre; // nombre del alumno.
        address direccion; // Dirrección wallet del alumno.
        uint edad;  // Edad de cada alumno.
    }

    // Lugar donde se almacena a todos los alumnos registrado de la escuela
    Alumno[] public lista_de_alumnos;

    // Guarda un hash único por cada alumno mediante su nombre, no se puede registrar dos lumnos con el mismo nombre, debe de ser diferente.
    mapping(string => bytes32) public hash_por_nombre;

    // Recibe los datos de cada alumno registrad y devuelve un identificador único mediante  (bytes32)
    function calcularHashAlumno(string memory _nombre, address _direccion, uint _edad) private pure returns (bytes32) {
        return keccak256(abi.encodePacked(_nombre, _direccion, _edad));
    }

    // Función que realiza esta variable es  guarda la información del alumno en una lista, cualquera puede consultarla 
    function nuevoAlumno(string memory _nombre, uint _edad) public {
        // Agregar a un nuevo alumno a la lista de la escuela, es publica  pública
        Alumno memory nuevo = Alumno(_nombre, msg.sender, _edad);
        lista_de_alumnos.push(nuevo);
 
        // Calcular el hash usando los datos del alumno. 
        bytes32 hash = calcularHashAlumno(_nombre, msg.sender, _edad);
        hash_por_nombre[_nombre] = hash;
    }
}